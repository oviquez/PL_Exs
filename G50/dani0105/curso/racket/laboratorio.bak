(define (diagonal n matrix)
  (let* ([index 0])
    (map
     (lambda (row) (map
                    (lambda (element)
                      (let* ([aux 0])
                        (cond((equal? index aux)
                              (+ element 0)
                         (else (
                                (+ aux 1)
                                (set! element 0)) )                  
                      ) ))
                     row))(+ index 1)
     matrix))
))





(define ( resolver-automata cadena automata estado)(
  getValueInIndex (doAutomata cadena automata 0) estado
))

(define ( doAutomata cadena automata estado )
   (cond ((null? cadena)
        estado)
   (else (
     cond ((zero? (car cadena))
           (doAutomata (cdr  cadena) automata (car (getValueInIndex estado automata))))
   (else(doAutomata (cdr  cadena) automata ( lastElement (getValueInIndex estado automata))) )) ))
)


(define (getValueInIndex index lista)
  (cond ((zero? index) ( car lista))
  (else ( getValueInIndex (- index 1) (cdr lista)) )                                    
))

(define (lastElement l)
  (cond ((null? (cdr l)) (car l))
        (else (lastElement (cdr l)))))
